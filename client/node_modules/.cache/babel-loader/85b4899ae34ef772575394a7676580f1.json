{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\n\nclass CanvasState {\n  constructor() {\n    this.canvas = null;\n    this.socket = null;\n    this.sessionid = null;\n    this.undoList = [];\n    this.redoList = [];\n    this.username = '';\n    makeAutoObservable(this);\n  }\n\n  setCanvas(canvas) {\n    this.canvas = canvas;\n  }\n\n  setUsername(name) {\n    this.username = name;\n  }\n\n  undo() {\n    var _this$canvas;\n\n    const ctx = (_this$canvas = this.canvas) === null || _this$canvas === void 0 ? void 0 : _this$canvas.getContext('2d');\n\n    if (this.undoList.length) {\n      var _this$canvas2;\n\n      const dataUrl = this.undoList.pop();\n      this.redoList.push((_this$canvas2 = this.canvas) === null || _this$canvas2 === void 0 ? void 0 : _this$canvas2.toDataURL());\n      const img = new Image();\n      img.src = dataUrl;\n\n      img.onload = () => {\n        var _this$canvas3, _this$canvas4, _this$canvas5, _this$canvas6;\n\n        ctx === null || ctx === void 0 ? void 0 : ctx.clearRect(0, 0, (_this$canvas3 = this.canvas) === null || _this$canvas3 === void 0 ? void 0 : _this$canvas3.width, (_this$canvas4 = this.canvas) === null || _this$canvas4 === void 0 ? void 0 : _this$canvas4.height);\n        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(img, 0, 0, (_this$canvas5 = this.canvas) === null || _this$canvas5 === void 0 ? void 0 : _this$canvas5.width, (_this$canvas6 = this.canvas) === null || _this$canvas6 === void 0 ? void 0 : _this$canvas6.height);\n      };\n    } else {\n      var _this$canvas7, _this$canvas8;\n\n      ctx === null || ctx === void 0 ? void 0 : ctx.clearRect(0, 0, (_this$canvas7 = this.canvas) === null || _this$canvas7 === void 0 ? void 0 : _this$canvas7.width, (_this$canvas8 = this.canvas) === null || _this$canvas8 === void 0 ? void 0 : _this$canvas8.height);\n    }\n  }\n\n  redo() {\n    var _this$canvas9;\n\n    const ctx = (_this$canvas9 = this.canvas) === null || _this$canvas9 === void 0 ? void 0 : _this$canvas9.getContext('2d');\n\n    if (this.redoList.length) {\n      const dataUrl = this.redoList.pop();\n      this.undoList.push(dataUrl);\n      const img = new Image();\n      img.src = dataUrl;\n\n      img.onload = () => {\n        var _this$canvas10, _this$canvas11, _this$canvas12, _this$canvas13;\n\n        ctx === null || ctx === void 0 ? void 0 : ctx.clearRect(0, 0, (_this$canvas10 = this.canvas) === null || _this$canvas10 === void 0 ? void 0 : _this$canvas10.width, (_this$canvas11 = this.canvas) === null || _this$canvas11 === void 0 ? void 0 : _this$canvas11.height);\n        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(img, 0, 0, (_this$canvas12 = this.canvas) === null || _this$canvas12 === void 0 ? void 0 : _this$canvas12.width, (_this$canvas13 = this.canvas) === null || _this$canvas13 === void 0 ? void 0 : _this$canvas13.height);\n      };\n    }\n  }\n\n  pushToUndo(data) {\n    this.undoList.push(data);\n  }\n\n  pushToRedo(data) {\n    this.redoList.push(data);\n  }\n\n}\n\nexport default new CanvasState();","map":{"version":3,"names":["makeAutoObservable","CanvasState","constructor","canvas","socket","sessionid","undoList","redoList","username","setCanvas","setUsername","name","undo","ctx","getContext","length","dataUrl","pop","push","toDataURL","img","Image","src","onload","clearRect","width","height","drawImage","redo","pushToUndo","data","pushToRedo"],"sources":["/home/nick-levhsin/Programming/Paint/client/src/store/canvasState.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport { ICanvas } from '../types/canvas';\n\nclass CanvasState implements ICanvas {\n  canvas: HTMLCanvasElement | null = null;\n  socket = null;\n  sessionid = null;\n  undoList: Array<string> = [];\n  redoList: Array<string> = [];\n  username: string = '';\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setCanvas(canvas: HTMLCanvasElement | null) {\n    this.canvas = canvas;\n  }\n\n  setUsername(name: string) {\n    this.username = name;\n  }\n\n  undo() {\n    const ctx = this.canvas?.getContext('2d');\n    if (this.undoList.length) {\n      const dataUrl = this.undoList.pop();\n      this.redoList.push(this.canvas?.toDataURL() as string);\n      const img = new Image();\n      img.src = dataUrl as string;\n      img.onload = () => {\n        ctx?.clearRect(\n          0,\n          0,\n          this.canvas?.width as number,\n          this.canvas?.height as number\n        );\n        ctx?.drawImage(\n          img,\n          0,\n          0,\n          this.canvas?.width as number,\n          this.canvas?.height as number\n        );\n      };\n    } else {\n      ctx?.clearRect(\n        0,\n        0,\n        this.canvas?.width as number,\n        this.canvas?.height as number\n      );\n    }\n  }\n\n  redo() {\n    const ctx = this.canvas?.getContext('2d');\n    if (this.redoList.length) {\n      const dataUrl = this.redoList.pop();\n      this.undoList.push(dataUrl as string);\n      const img = new Image();\n      img.src = dataUrl as string;\n      img.onload = () => {\n        ctx?.clearRect(\n          0,\n          0,\n          this.canvas?.width as number,\n          this.canvas?.height as number\n        );\n        ctx?.drawImage(\n          img,\n          0,\n          0,\n          this.canvas?.width as number,\n          this.canvas?.height as number\n        );\n      };\n    }\n  }\n\n  pushToUndo(data: string) {\n    this.undoList.push(data);\n  }\n\n  pushToRedo(data: string) {\n    this.redoList.push(data);\n  }\n}\n\nexport default new CanvasState();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}